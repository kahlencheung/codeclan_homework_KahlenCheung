min = 20, max = 100, value = c(40, 70))
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Publisher",plotOutput("publisher_plot")),
tabPanel("Platform", plotOutput("platform_plot")),
tabPanel("Year Overview", plotOutput("year_plot")),
tabPanel("Details", tableOutput("filtered_table"))
)
)
)
)
server <- function(input, output) {
game_sales_filtered <- reactive({
game_sales %>%
filter(genre == input$genre_input) %>%
filter(user_score >= input$user_score_input[1]) %>%
filter(user_score <= input$user_score_input[2]) %>%
filter(critic_score >= input$critic_score_input[1]) %>%
filter(critic_score <= input$critic_score_input[2])
})
output$publisher_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = publisher, y = sales)+
geom_col()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
output$platform_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = platform, y = sales)+
geom_col()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
output$year_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = year_of_release, y = sales, fill = publisher)+
geom_col()+
theme_dark()
})
# output$fitered_table <- renderTable({
#
#
# })
}
# Run the application
shinyApp(ui = ui, server = server)
game_sales %>%
select(game_sales[1:7,9,10])
ui <- fluidPage(
titlePanel("Comparing Importance of Internect Access vs Reducing Poluution"),
tabsetPanel(
tabPanel("Plots",
sidebarLayout(
sidebarPanel(
selectInput("gender_input",
"Gender",
choices = c("Male" = "M", "Female" = "F")),
selectInput("region_input",
"Region",
choices = unique(students_big$region)),
actionButton("action_input",
label = "Generate Plots and Tables")
),
mainPanel(
plotOutput("internet_plot"),
plotOutput("pollution_plot")                ##main panel is designed in the sidebarLayout
))
), ###
tabPanel("Data",
sidebarLayout(
sidebarPanel(
selectInput("gender_input",
"Gender",
choices = c("Male" = "M", "Female" = "F")),
selectInput("region_input",
"Region",
choices = unique(students_big$region)),
actionButton("action_inpput",
label = "Generate Plots and Tables")
),
mainPanel(
dataTableOutput("students_big_input")
))
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$internet_plot <- renderPlot({
students_big %>%
filter(gender == input$gender_input) %>%
filter(region == input$region_input) %>%
ggplot()+
aes(x = importance_internet_access)+
geom_bar(width = 8)
})
output$pollution_plot <- renderPlot({
students_big %>%
filter(gender == input$gender_input) %>%
filter(region == input$region_input) %>%
ggplot()+
aes(x = importance_reducing_pollution)+
geom_bar(width = 8)
})
output$students_big_input <- renderDataTable(
students_big %>%
group_by(region, gender, importance_internet_access, importance_reducing_pollution)
)
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("A Breif Review on Game Sales"),
sidebarLayout(
sidebarPanel(
selectInput("genre_input",
"Genre",
choices = unique(game_sales$genre)),
sliderInput("user_score_input",
"Score by Users",
min = 0, max = 10, value = c(3, 6)),
sliderInput("critic_score_input",
"Score by Critics",
min = 20, max = 100, value = c(40, 70))
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Publisher",plotOutput("publisher_plot")),
tabPanel("Platform", plotOutput("platform_plot")),
tabPanel("Year Overview", plotOutput("year_plot")),
tabPanel("Details", dataTableOutput("filtered_table"))
)
)
)
)
server <- function(input, output) {
game_sales_filtered <- reactive({
game_sales %>%
filter(genre == input$genre_input) %>%
filter(user_score >= input$user_score_input[1]) %>%
filter(user_score <= input$user_score_input[2]) %>%
filter(critic_score >= input$critic_score_input[1]) %>%
filter(critic_score <= input$critic_score_input[2])
})
output$publisher_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = publisher, y = sales)+
geom_col()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
output$platform_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = platform, y = sales)+
geom_col()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
output$year_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = year_of_release, y = sales, fill = publisher)+
geom_col()+
theme_dark()
})
output$filtered_table <- renderDataTable({
game_sales %>%
group_by(name, genre, year_of_release, publisher, sales, critic_score, user_score, rating, platform)
})
}
# Run the application
shinyApp(ui = ui, server = server)
game_sales %>%
ggplot()+
aes(rating, sales)+
geom_point()
game_sales %>%
ggplot()+
aes(rating, publisher)+
geom_point()
game_sales %>%
ggplot()+
aes(rating, name)+
geom_point()
game_sales %>%
ggplot()+
aes(sales, rating)+
geom_point()
library(shinythemes)
ui <- fluidPage(
theme = shinytheme("United"),
titlePanel("A Breif Review on Game Sales"),
sidebarLayout(
sidebarPanel(
selectInput("genre_input",
"Genre",
choices = unique(game_sales$genre)),
sliderInput("user_score_input",
"Score by Users",
min = 0, max = 10, value = c(3, 6)),
sliderInput("critic_score_input",
"Score by Critics",
min = 20, max = 100, value = c(40, 70))
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Publisher",plotOutput("publisher_plot")),
tabPanel("Platform", plotOutput("platform_plot")),
tabPanel("Year Overview", plotOutput("year_plot")),
tabPanel("Details", dataTableOutput("filtered_table"))
)
)
)
)
server <- function(input, output) {
game_sales_filtered <- reactive({
game_sales %>%
filter(genre == input$genre_input) %>%
filter(user_score >= input$user_score_input[1]) %>%
filter(user_score <= input$user_score_input[2]) %>%
filter(critic_score >= input$critic_score_input[1]) %>%
filter(critic_score <= input$critic_score_input[2])
})
output$publisher_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = publisher, y = sales)+
geom_col()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
output$platform_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = platform, y = sales)+
geom_col()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
output$year_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = year_of_release, y = sales, fill = publisher)+
geom_col()+
theme_dark()
})
output$filtered_table <- renderDataTable({
game_sales %>%
group_by(name, genre, year_of_release, publisher, sales, critic_score, user_score, rating, platform)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("United"),
titlePanel("A Breif Review on Game Sales"),
sidebarLayout(
sidebarPanel(
selectInput("genre_input",
"Genre",
choices = unique(game_sales$genre)),
sliderInput("user_score_input",
"Score by Users",
min = 0, max = 10, value = c(3, 6)),
sliderInput("critic_score_input",
"Score by Critics",
min = 20, max = 100, value = c(40, 70))
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Publisher",plotOutput("publisher_plot")),
tabPanel("Platform", plotOutput("platform_plot")),
tabPanel("Year Overview", plotOutput("year_plot")),
tabPanel("Details", dataTableOutput("filtered_table"))
)
)
)
)
server <- function(input, output) {
game_sales_filtered <- reactive({
game_sales %>%
filter(genre == input$genre_input) %>%
filter(user_score >= input$user_score_input[1]) %>%
filter(user_score <= input$user_score_input[2]) %>%
filter(critic_score >= input$critic_score_input[1]) %>%
filter(critic_score <= input$critic_score_input[2])
})
output$publisher_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = publisher, y = sales)+
geom_col(aes(fill = highlight_flag))+
scale_fill_manual(values = c("#595959", "red"))+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
output$platform_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = platform, y = sales)+
geom_col()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
output$year_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = year_of_release, y = sales, fill = publisher)+
geom_col()+
theme_dark()
})
output$filtered_table <- renderDataTable({
game_sales %>%
group_by(name, genre, year_of_release, publisher, sales, critic_score, user_score, rating, platform)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("United"),
titlePanel("A Breif Review on Game Sales"),
sidebarLayout(
sidebarPanel(
selectInput("genre_input",
"Genre",
choices = unique(game_sales$genre)),
sliderInput("user_score_input",
"Score by Users",
min = 0, max = 10, value = c(3, 6)),
sliderInput("critic_score_input",
"Score by Critics",
min = 20, max = 100, value = c(40, 70))
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Publisher",plotOutput("publisher_plot")),
tabPanel("Platform", plotOutput("platform_plot")),
tabPanel("Year Overview", plotOutput("year_plot")),
tabPanel("Details", dataTableOutput("filtered_table"))
)
)
)
)
server <- function(input, output) {
game_sales_filtered <- reactive({
game_sales %>%
filter(genre == input$genre_input) %>%
filter(user_score >= input$user_score_input[1]) %>%
filter(user_score <= input$user_score_input[2]) %>%
filter(critic_score >= input$critic_score_input[1]) %>%
filter(critic_score <= input$critic_score_input[2])
})
output$publisher_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = publisher, y = sales)+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
output$platform_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = platform, y = sales)+
geom_col()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
output$year_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = year_of_release, y = sales, fill = publisher)+
geom_col()+
theme_dark()
})
output$filtered_table <- renderDataTable({
game_sales %>%
group_by(name, genre, year_of_release, publisher, sales, critic_score, user_score, rating, platform)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("flaty"),
titlePanel("A Breif Review on Game Sales"),
## In order to provide readers a straight forward review of all games, I chose `genre`, `user_score` and `critic_score`
## as part of the sidebar Panel. Readers are able to know which publishers / platforms have the most or the least valuable games
## over the years
sidebarLayout(
sidebarPanel(
selectInput("genre_input",
"Genre",
choices = unique(game_sales$genre)),
sliderInput("user_score_input",
"Score by Users",
min = 0, max = 10, value = c(3, 6)),
sliderInput("critic_score_input",
"Score by Critics",
min = 20, max = 100, value = c(40, 70))
),
## Some charts will be displayed in different tabs base on the core variable:
## publisher, platform, and year. The last tab is the table details
mainPanel(
tabsetPanel(
tabPanel("Publisher",plotOutput("publisher_plot")),
tabPanel("Platform", plotOutput("platform_plot")),
tabPanel("Year Overview", plotOutput("year_plot")),
tabPanel("Details", dataTableOutput("filtered_table"))
)
)
)
)
server <- function(input, output) {
game_sales_filtered <- reactive({
game_sales %>%
filter(genre == input$genre_input) %>%
filter(user_score >= input$user_score_input[1]) %>%
filter(user_score <= input$user_score_input[2]) %>%
filter(critic_score >= input$critic_score_input[1]) %>%
filter(critic_score <= input$critic_score_input[2])
})
##Below code refers to the table in tab `Publisher`
##This chart can review clearly which publisher has the most critics score as same as user score, which means the recommendation
## is trustworthy. On the other hand, readers are able to figure out which publisher is most likely paying for critics score
output$publisher_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = publisher, y = sales)+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
##Below code refers to the table in tab `Platform`
##Again, the user score and critics score help the readers to know by which platform is most likely to provide high-score games,
##that let them decide which platform is deserve purchasing.
output$platform_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = platform, y = sales)+
geom_col()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
##Below code refers to the table in tab `Year Overview`
##An overview about the market share value of every publisher by each year
output$year_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = year_of_release, y = sales, fill = publisher)+
geom_col()+
theme_dark()
})
##Below code refers to the table in tab `Details`, with only take out `developer` from the original table
output$filtered_table <- renderDataTable({
game_sales %>%
group_by(name, genre, year_of_release, publisher, sales, critic_score, user_score, rating, platform)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("slate"),
titlePanel("A Breif Review on Game Sales"),
## In order to provide readers a straight forward review of all games, I chose `genre`, `user_score` and `critic_score`
## as part of the sidebar Panel. Readers are able to know which publishers / platforms have the most or the least valuable games
## over the years
sidebarLayout(
sidebarPanel(
selectInput("genre_input",
"Genre",
choices = unique(game_sales$genre)),
sliderInput("user_score_input",
"Score by Users",
min = 0, max = 10, value = c(3, 6)),
sliderInput("critic_score_input",
"Score by Critics",
min = 20, max = 100, value = c(40, 70))
),
## Some charts will be displayed in different tabs base on the core variable:
## publisher, platform, and year. The last tab is the table details
mainPanel(
tabsetPanel(
tabPanel("Publisher",plotOutput("publisher_plot")),
tabPanel("Platform", plotOutput("platform_plot")),
tabPanel("Year Overview", plotOutput("year_plot")),
tabPanel("Details", dataTableOutput("filtered_table"))
)
)
)
)
server <- function(input, output) {
game_sales_filtered <- reactive({
game_sales %>%
filter(genre == input$genre_input) %>%
filter(user_score >= input$user_score_input[1]) %>%
filter(user_score <= input$user_score_input[2]) %>%
filter(critic_score >= input$critic_score_input[1]) %>%
filter(critic_score <= input$critic_score_input[2])
})
##Below code refers to the table in tab `Publisher`
##This chart can review clearly which publisher has the most critics score as same as user score, which means the recommendation
## is trustworthy. On the other hand, readers are able to figure out which publisher is most likely paying for critics score
output$publisher_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = publisher, y = sales)+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
##Below code refers to the table in tab `Platform`
##Again, the user score and critics score help the readers to know by which platform is most likely to provide high-score games,
##that let them decide which platform is deserve purchasing.
output$platform_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = platform, y = sales)+
geom_col()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
})
##Below code refers to the table in tab `Year Overview`
##An overview about the market share value of every publisher by each year
output$year_plot <- renderPlot({
ggplot(game_sales_filtered())+
aes(x = year_of_release, y = sales, fill = publisher)+
geom_col()+
theme_dark()
})
##Below code refers to the table in tab `Details`, with only take out `developer` from the original table
output$filtered_table <- renderDataTable({
game_sales %>%
group_by(name, genre, year_of_release, publisher, sales, critic_score, user_score, rating, platform)
})
}
# Run the application
shinyApp(ui = ui, server = server)
