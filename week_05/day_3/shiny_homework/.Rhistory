sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot"),
tags$a("Details", href = "https://www.kaggle.com/datasets/ankanhore545/cost-of-living-index-2022")
)
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022 %>%
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
ui <- fluidPage(
)
View(ui)
ui <- fluidPage(
theme = shinytheme("united")
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
)
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
)
)
all_country <- unique(cost_of_living_index_2022_avg$country)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
"choices" = all_country)
),
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
all_country)
),
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
,
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
,
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022 %>%
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
,
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022_avg %>%
filter(cost_of_living_index == input$index_input) %>%
filter(country == input$country_input) %>%
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
,
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022_avg %>%
filter(cost_of_living_index == input$index_input) %>%
filter(country == input$country_input) %>%
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
,
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022 %>%
filter(cost_of_living_index == input$index_input) %>%
filter(country == input$country_input) %>%
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
,
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022_avg %>%
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022_avg %>%
filter(country == input$country_input)
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
runApp()
View(cost_of_living_index_2022_avg)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
