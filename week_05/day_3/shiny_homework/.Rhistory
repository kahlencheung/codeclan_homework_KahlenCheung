min = 20,
max = 150,
value = 70)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
)
)
all_country <- unique(cost_of_living_index_2022_avg$country)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
"choices" = all_country)
),
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
all_country)
),
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
,
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
,
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022 %>%
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
),
sidebarPanel(
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
,
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022_avg %>%
filter(cost_of_living_index == input$index_input) %>%
filter(country == input$country_input) %>%
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
,
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022_avg %>%
filter(cost_of_living_index == input$index_input) %>%
filter(country == input$country_input) %>%
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
,
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022 %>%
filter(cost_of_living_index == input$index_input) %>%
filter(country == input$country_input) %>%
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("index_input",
"Cost Of Living Index:",
min = 20,
max = 150,
value = 70)
,
selectInput("country_input",
"Select Country Below",
choices = all_country)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022_avg %>%
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022_avg %>%
filter(country == input$country_input)
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
runApp()
View(cost_of_living_index_2022_avg)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("cost_index_input",
"Cost of Living Index:",
min = 40,
max = 150,
value = c(40, 90)),
HTML("<br><br><br>"),
sliderInput("rent_index_input",
"Rent Index:",
min = 5,
max = 100,
value= c(20, 80))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot"),
tags$a("Source", href = "https://www.kaggle.com/datasets/ankanhore545/cost-of-living-index-2022")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022_avg %>%
filter(cost_of_living_index >= input$cost_index_input[1]) %>%
filter(cost_of_living_index <= input$cost_index_input[2]) %>%
filter(rent_index >= input$rent_index_input[1]) %>%
filter(rent_index <= input$rent_index_input[2]) %>%
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
library(ggplot2)
library(shinythemes)
ui <- fluidPage(
theme = shinytheme("united"),
# Application title
titlePanel("Worldwide Cost of Living Index 2022"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("cost_index_input",
"Cost of Living Index:",
min = 40,
max = 150,
value = c(40, 90)),
HTML("<br><br><br>"),
sliderInput("rent_index_input",
"Rent Index:",
min = 5,
max = 100,
value= c(20, 80))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("indexPlot"),
tags$a("Source", href = "https://www.kaggle.com/datasets/ankanhore545/cost-of-living-index-2022")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$indexPlot <- renderPlot({
# generate bins based on input$bins from ui.R
cost_of_living_index_2022_avg %>%
filter(cost_of_living_index >= input$cost_index_input[1]) %>%
filter(cost_of_living_index <= input$cost_index_input[2]) %>%
filter(rent_index >= input$rent_index_input[1]) %>%
filter(rent_index <= input$rent_index_input[2]) %>%
ggplot()+
aes( x = country, y = cost_of_living_index, fill = rent_index)+
geom_col()+
labs(x = "Country", y = "Cost Of Living Index")+
theme(axis.text.x = element_text(size = 7, angle = 90, hjust = 1, vjust = 0.5))
})
}
cost_of_lving_index_2022 <- read_csv(here::here("data/cost_of_living_index_2022.csv"))
View(cost_of_lving_index_2022)
cost_of_lving_index_2022 <- read_csv(here::here("data/cost_of_living_index_2022.csv")) %>%
row_to_names(row_number = 1)
cost_of_lving_index_2022 <- read_csv(here::here("data/cost_of_living_index_2022.csv")) %>%
rownames_to_column(row_number = 1)
library(janitor)
cost_of_lving_index_2022 <- read_csv(here::here("data/cost_of_living_index_2022.csv")) %>%
row_to_names(row_number = 1)
cost_of_lving_index_2022 %>% clean_names(cost_of_lving_index_2022)
View(cost_of_lving_index_2022)
cost_of_lving_index_2022 <- read_csv(here::here("data/cost_of_living_index_2022.csv")) %>%
row_to_names(row_number = 1) %>%
clean_names()
View(cost_of_lving_index_2022)
cost_of_lving_index_2022 <- cost_of_lving_index_2022 %>%
mutate( cost_of_living_index = as.numeric(cost_of_living_index)) %>%
mutate( rent_index = as.numeric(rent_index)) %>%
mutate( cost_of_living_plus_rent_index = as.numeric(cost_of_living_plus_rent_index)) %>%
mutate( groceries_index = as.numeric(groceries_index)) %>%
mutate( cost_of_living_index = as.numeric(cost_of_living_index))
View(cost_of_lving_index_2022)
cost_of_lving_index_2022 <- cost_of_lving_index_2022 %>%
mutate( cost_of_living_index = as.numeric(cost_of_living_index)) %>%
mutate( rent_index = as.numeric(rent_index)) %>%
mutate( cost_of_living_plus_rent_index = as.numeric(cost_of_living_plus_rent_index)) %>%
mutate( groceries_index = as.numeric(groceries_index)) %>%
mutate( cost_of_living_index = as.numeric(cost_of_living_index)) %>%
mutate( restaurant_price_index = as.numeric(cost_of_living_index)) %>%
mutate( local_purchasing_power_index = as.numeric(local_purchasing_power_index))
avg_cost <- mean(cost_of_lving_index_2022$cost_of_living_index)
cost_of_lving_index_2022_avg <- cost_of_lving_index_2022 %>%
filter(cost_of_living_index >= avg_cost)
View(cost_of_lving_index_2022_avg)
write_csv(cost_of_lving_index_2022_avg, file = here::here("data/cost_of_living_index_2022_avg.csv""))
rite_csv(cost_of_lving_index_2022_avg, file = here::here("data/cost_of_living_index_2022_avg.csv""))
write_csv(cost_of_lving_index_2022_avg, file = here::here("data/cost_of_living_index_2022_avg.csv""))
write_csv(cost_of_lving_index_2022_avg, here::here("data/cost_of_living_index_2022_avg.csv""))
write.csv(cost_of_lving_index_2022_avg, file = here::here("data/cost_of_living_index_2022_avg.csv""))
write.csv(cost_of_lving_index_2022_avg, file = here::here("data/cost_of_living_index_2022_avg.csv"))
write.csv(cost_of_lving_index_2022_avg, file = here::here("data/cost_of_living_index_2022_avg.csv"))
cost_of_lving_index_2022_avg <- read_csv(here::here("data/cost_of_living_index_2022_avg.csv"))
all_country <- unique(cost_of_living_index_2022_avg$country)
cost_of_lving_index_2022_avg <- read_csv(here::here("data/cost_of_living_index_2022_avg.csv"))
all_country <- unique(cost_of_living_index_2022_avg$country)
cost_of_living_index_2022_avg <- read_csv(here::here("data/cost_of_living_index_2022_avg.csv"))
all_country <- unique(cost_of_living_index_2022_avg$country)
remove(cost_of_lving_index_2022_avg)
runApp()
